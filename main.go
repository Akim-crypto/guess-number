package main

import (
	"bufio"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"
)

const (
    green = "\033[32m"
    red   = "\033[31m"
    blue  = "\033[34m"
    reset = "\033[0m"
)

const welcome = `
==============================
  Guess the Number (CLI Game)
==============================
–ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.
‚Ä¢ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
  - easy   : 10 –ø–æ–ø—ã—Ç–æ–∫
  - medium : 7 –ø–æ–ø—ã—Ç–æ–∫
  - hard   : 5 –ø–æ–ø—ã—Ç–æ–∫
‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞: –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ.
‚Ä¢ –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ —É–≥–∞–¥–∞–Ω–æ –∏–ª–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏.
–£–¥–∞—á–∏!
`


var dificultyAttempts = map[string]int{
	"easy":10,
	"medium":7,
	"hard":5,
}

func askDifficulty(r *bufio.Reader)int{
	for {
		fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (easy/medium/hard):")
		text, _ := r.ReadString('\n')
		choice := strings.ToLower(strings.TrimSpace(text))
		if attempts , ok := dificultyAttempts[choice]; ok {
			return attempts
		}
		fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ : easy,medium –∏–ª–∏ hard")
	}
}

func askGuess(r *bufio.Reader) int{
	for {
		fmt.Print("–í–∞—à –æ—Ç–≤–µ—Ç (—á–∏—Å–ª–æ 1-100)")
		text,_:=r.ReadString('\n')
		text = strings.TrimSpace(text)
		n,err := strconv.Atoi(text) 
		if err == nil && n >= 1 && n <= 100{
			return n 
		}
		fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
	}
}


func play(r *bufio.Reader){
	fmt.Println(welcome)

	rand.Seed(time.Now().UnixNano())
	secret := rand.Intn(100) + 1 

	attemptsLeft := askDifficulty(r)
	attemptsUsed := 0

	for attemptsLeft > 0 {
		fmt.Printf("\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: %d\n",attemptsLeft)
		quess := askGuess(r)
		attemptsUsed++
		attemptsLeft--

		if quess == secret {
			fmt.Printf("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ %d –∑–∞ %d –ø–æ–ø—ã—Ç–æ–∫.\n", secret, attemptsUsed)
			return
		} else if quess < secret {
			fmt.Println(red +"–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ"+ reset)
		} else {
			fmt.Println(red + "–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ" + reset)
		}
	}
	fmt.Printf("\nüòî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: %d\n", secret)
}


func wantReplay(r *bufio.Reader) bool {
	for {
		fmt.Print("\n–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑? (y/n):")
		text,_ := r.ReadString('\n')
		ans := strings.ToLower(strings.TrimSpace(text))
		if ans == "y" || ans == "yes" || ans =="–¥" || ans == "–¥–∞"{
			return  true
		}
		if ans == "n" || ans =="no" ||ans == "–Ω" || ans =="–Ω–µ—Ç" {
			return false
		}
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ y/n.")
	}
}

func main(){
	reader := bufio.NewReader(os.Stdin)
	for {
		play(reader)
		if !wantReplay(reader){
			fmt.Println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É")
			return
		}
	}
}